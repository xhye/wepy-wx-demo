<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import Tips from './utils/tips'

  import { setStore } from 'wepy-redux'
  import configStore from './store'

  const store = configStore()
  setStore(store)

  export default class extends wepy.app {
    config = {
      usingComponents: {
        'van-cell-group': '/components/vant/cell-group/index',
        'van-cell': '/components/vant/cell/index',
        'van-field': '/components/vant/field/index',
        'van-button': '/components/vant/button/index',
        'van-checkbox': '/components/vant/checkbox/index',
        'van-icon': '/components/vant/icon/index'
      },
      pages: [ // 主包
        'pages/index/index',
        'pages/index',
        'pages/user/index'
      ],
      subPackages: [ // 分包
        {
          'root': 'pagesSub/moduleOne',
          'name': 'moduleOne',
          'pages': [
            'pages/index'
          ]
        },
        {
          'root': 'pagesSub/moduleTwo',
          'name': 'moduleTwo',
          'pages': [
            'pages/index'
          ]
        }
      ],
      'preloadRule': { // 分包预加载
        'pages/index/index': {
          'network': 'all',
          'packages': ['moduleOne', 'moduleTwo']
        }
      },
      navigateToMiniProgramAppIdList: [], // 跳转小程序AppId
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#fff',
        navigationBarTitleText: 'WeChat',
        navigationBarTextStyle: 'black'
      },
      tabBar: {
        color: '#787d87',
        selectedColor: '#3e54e0',
        borderStyle: 'white',
        backgroundColor: '#f3f7fe',
        list: [
          {
            pagePath: 'pages/index/index',
            iconPath: 'images/index.png',
            selectedIconPath: 'images/index-selected.png',
            text: '首页'
          },
          {
            pagePath: 'pages/user/index',
            iconPath: 'images/center.png',
            selectedIconPath: 'images/center-selected.png',
            text: '我的'
          }
        ]
      }
    }

    globalData = {
      userInfo: null
    }

    constructor() {
      super()
      this.use('requestfix')
      // this.use('promisify') // 使用Promise
      // 拦截request请求
      this.intercept('request', {
        // 发出请求时的回调函数
        config(p) {
          // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
          p.timestamp = +new Date()
          console.log('config request: ', p)
          // 必须返回OBJECT参数对象，否则无法发送请求到服务端
          return p
        },
        // 请求成功后的回调函数
        success(p) {
          // 可以在这里对收到的响应数据对象进行加工处理
          console.log('request success: ', p)
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p
        },
        // 请求失败后的回调函数
        fail(p) {
          console.log('request fail: ', p)
          // 必须返回响应数据对象，否则后续无法对响应数据进行处理
          return p
        },
        // 请求完成时的回调函数(请求成功或失败都会被执行)
        complete(p) {
          Tips.loaded()
          console.log('request complete: ', p)
        }
      })
    }

    onLaunch() {
      this.testAsync()
    }

    sleep(s) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve('promise resolved')
        }, s * 1000)
      })
    }

    async testAsync() {
      const data = await this.sleep(3)
      console.log(data)
    }
  }
</script>
<style lang='css'>
@import '/styles/weui/weui.wxss';
</style>
<style lang="less">
@import '/styles/base/index.less';
</style>
